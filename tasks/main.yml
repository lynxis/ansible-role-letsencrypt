---

#################################################
# one time setup
#################################################

- name: install requirements
  apt: "name={{ item }}"
  with_items:
    - git
    - python3

- name: create data directory
  file:
    path: '{{ acme_tiny_data_directory }}'
    state: directory

- name: create csr directory
  file:
    path: '{{ acme_tiny_data_directory }}/csrs'
    state: directory

- name: create group
  group:
    name: '{{ letsencrypt_group }}'
    system: yes

- name: create user
  user:
    name: '{{ letsencrypt_user }}'
    group: '{{ letsencrypt_group }}'
    home: '{{ acme_tiny_data_directory }}'
    system: yes

- name: create certs directory
  file:
    path: '{{ letsencrypt_certs_dir }}'
    state: directory
    mode: '{{ letsencrypt_certs_dir_permissions }}'
    owner: '{{ letsencrypt_certs_dir_owner }}'
    group: '{{ letsencrypt_certs_dir_group }}'

- name: create key directory
  file:
    path: '{{ letsencrypt_key_dir }}'
    state: directory
    mode: '{{ letsencrypt_key_dir_permissions }}'
    owner: '{{ letsencrypt_key_dir_owner }}'
    group: '{{ letsencrypt_key_dir_group }}'


- name: create program directory
  file:
    path: '{{ acme_tiny_software_directory }}'
    state: directory

- name: create challenges directory
  file:
    path: '{{ acme_tiny_challenges_directory }}'
    state: directory
    owner: '{{ letsencrypt_user }}'
    group: '{{ letsencrypt_group }}'

- name: ensure correct permissions on data directory
  file:
    path: '{{ acme_tiny_data_directory }}'
    state: directory
    mode: 0700
    owner: '{{ letsencrypt_user }}'
    group: '{{ letsencrypt_group }}'
    recurse: true

- name: clone acme-tiny repository
  git:
    dest: '{{ acme_tiny_software_directory }}'
    repo: '{{ acme_tiny_repo }}'
    version: '{{ acme_tiny_commit }}'
    accept_hostkey: yes

- name: copy Letsencrypt account key source file
  copy:
    src: "{{ letsencrypt_account_key_source_file }}"
    dest: "{{ letsencrypt_account_key }}"
  when: letsencrypt_account_key_source_file is defined

- name: copy Letsencrypt account key source contents
  copy:
    content: "{{ letsencrypt_account_key_source_content|trim }}"
    dest: "{{ letsencrypt_account_key }}"
  when: letsencrypt_account_key_source_content is defined

- name: generate a new account key
  shell: >
    openssl genrsa 4096 > {{ letsencrypt_account_key }}
  args:
    creates: "{{ letsencrypt_account_key }}"
  register: generate_account_key

- name: print account public key
  command: >
    openssl rsa -in {{ letsencrypt_account_key }} -pubout
  register: account_public_key
  when: generate_account_key | changed

- name: "Please register the account public key with Letsencrypt, using for example https://gethttpsforfree.com/"
  debug: var=account_public_key.stdout
  when: generate_account_key | changed

- name: generate certificate renewal script
  template:
    src: renew-certs.py
    dest: "{{ acme_tiny_data_directory }}/renew-certs.py"
    mode: 0700
    owner: '{{ letsencrypt_user }}'
    group: '{{ letsencrypt_group }}'

- name: download intermediate certificate
  get_url: >
    url={{ letsencrypt_intermediate_cert_url }}
    dest={{ letsencrypt_intermediate_cert_path }}
    sha256sum={{ letsencrypt_intermediate_cert_sha256sum }}

#################################################
# key setup

- name: generate private keys
  shell: >
    openssl genrsa 4096 > {{ item.keypath }}
  args:
    creates: "{{ item.keypath }}"
  with_items: "{{ letsencrypt_certs }}"
  register: generated_key
  tags: ['letsencrypt_keys']

# todo this leaves a very very tiny timeframe where the keys are potentially not secured; this is only relevant if the
# folder containing the keys is not properly secured (i.e. only readable by root)
- name: ensure correct permissions on private keys
  file: >
    path={{ item.keypath }}
    owner={{ item.key_owner|default(letsencrypt_default_key_owner) }} group={{ item.key_group|default(letsencrypt_default_key_group) }}
    mode={{ item.key_permissions|default(letsencrypt_default_key_permissions) }}
  with_items: "{{ letsencrypt_certs }}"
  tags: ['letsencrypt_keys']

- name: generate csrs for single domain keys
  shell: >
    openssl req -new -sha256 -key '{{ item.keypath }}' -subj '/CN={{ item.host }}' > {{ acme_tiny_data_directory }}/csrs/{{ item.name }}.csr
  args:
    creates: "{{ acme_tiny_data_directory }}/csrs/{{ item.name }}.csr"
  when: item.host is string
  with_items: "{{ letsencrypt_certs }}"
  register: generated_csr_single
  tags: ['letsencrypt_keys']

# we must use bash here because dash (default on Debian) throws an error "unexpected ( on line 1"
- name: generate csrs for multi domain keys
  shell: "openssl req -new -sha256 -key '{{ item.keypath }}' -subj '/' -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf '[SAN]\nsubjectAltName=DNS:{{ item.host|join(',DNS:') }}')) > {{ acme_tiny_data_directory }}/csrs/{{ item.name }}.csr"
  args:
    executable: "/bin/bash"
    creates: "{{ acme_tiny_data_directory }}/csrs/{{ item.name }}.csr"
  when: item.host is not string
  with_items: "{{ letsencrypt_certs }}"
  register: generated_csr_multi
  tags: ['letsencrypt_keys']

- name: check if cert already exists
  stat: path={{ item.certpath }}
  register: stat_cert
  with_items: "{{ letsencrypt_certs }}"
  tags: ['letsencrypt_keys']

- name: generate the initial certificates
  command: ./renew-certs.py
  args:
    chdir: "{{ acme_tiny_data_directory }}"
  become_user: "{{ letsencrypt_user }}"
  register: generate_initial_cert
  failed_when: (generate_initial_cert.stdout is defined and
    ('error' in generate_initial_cert.stdout or 'Error' in generate_initial_cert.stdout
      or 'Error' in generate_initial_cert.stderr))
  when: ((generated_csr_single | changed) or (generated_csr_multi | changed) or (generated_key | changed) or (item.stat.exists == False)) and (letsencrypt_create_dummy_cert == False)
  with_items: "{{ stat_cert.results }}"
  tags: ['letsencrypt_keys']

# dummy certificate
- name: generate a dummy certificates valid for one day
  shell: "openssl x509 -req -days 1 -in '{{ acme_tiny_data_directory }}/csrs/{{ item.item.name }}.csr' -signkey '{{ item.item.keypath }}' -out '{{ item.item.certpath }}'"
  args:
    executable: "/bin/bash"
    creates: "{{ item.item.certpath }}"
  # become_user: "{{ letsencrypt_user }}"
  when: (item.stat.exists == False) and (letsencrypt_create_dummy_cert == True)
  with_items: "{{ stat_cert.results }}"
  tags: ['letsencrypt_keys']

- name: "dummy certificate: copy self signed to chained"
  copy:
    src: "{{ item.item.certpath }}"
    dest: "{{ item.item.chainedcertpath }}"
    remote_src: yes
  become_user: "{{ letsencrypt_user }}"
  when: (item.stat.exists == False) and (letsencrypt_create_dummy_cert == True)
  with_items: "{{ stat_cert.results }}"
  tags: ['letsencrypt_keys']

- name: ensure certificates are owned by letsencrypt user
  file:
    path: '{{ item.certpath }}'
    mode: '644'
    owner: '{{ letsencrypt_user }}'
    group: '{{ letsencrypt_group }}'
  with_items: "{{ letsencrypt_certs }}"
  tags: ['letsencrypt_keys']

- name: ensure chained certificates are owned by letsencrypt user
  file:
    path: '{{ item.chainedcertpath }}'
    mode: '644'
    owner: '{{ letsencrypt_user }}'
    group: '{{ letsencrypt_group }}'
  with_items: "{{ letsencrypt_certs }}"
  when: item.chainedcertpath is defined
  tags: ['letsencrypt_keys']

#################################################
# cron setup

- name: install cronjob for key generation
  cron:
    job: "cd {{ acme_tiny_data_directory }} && ./renew-certs.py"
    day: "{{ letsencrypt_cronjob_daysofmonth }}"
    hour: 4
    minute: 30
    state: present
    name: "letsencrypt certificate renewal"
    user: "{{ letsencrypt_user }}"

- name: install cronjob for reloading services
  cron:
    job: "systemctl reload {{ item }}"
    day: "{{ letsencrypt_cronjob_daysofmonth }}"
    hour: 5
    minute: 00
    state: present
    name: "letsencrypt reload service {{ item }}"
    user: "root"
  with_items: "{{ letsencrypt_reload_services }}"
  when: (ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int >= 15) or
    (ansible_distribution == "Debian" and ansible_distribution_major_version|int >= 8)

- name: install cronjob for reloading services
  cron:
    job: "/etc/init.d/{{ item }} reload"
    day: "{{ letsencrypt_cronjob_daysofmonth }}"
    hour: 5
    minute: 00
    state: present
    name: "letsencrypt reload service {{ item }}"
    user: "root"
  with_items: "{{ letsencrypt_reload_services }}"
  when: (ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int < 15) or
    (ansible_distribution == "Debian" and ansible_distribution_major_version|int < 8)
...
